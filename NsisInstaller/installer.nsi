RequestExecutionLevel admin
Unicode true
SetCompressor /SOLID /FINAL lzma

!addincludedir ".\inc"

; Include variables used by the installer.
; This include file is generated by build.py.
!include "InstallerVars.nsh"

; Default installation directory
InstallDir "$PROGRAMFILES64\${COMPANY_NAME}\${APP_NAME}"

Name "${APP_NAME}"
OutFile "bin\${INSTALLER_FILENAME}"

; These show up in exe -> properties -> details
VIAddVersionKey "ProductName" "${APP_NAME} Installer"
VIAddVersionKey "CompanyName" "${COMPANY_NAME}"
VIAddVersionKey "LegalCopyright" "Copyright ${COPYRIGHT_YEAR} ${COMPANY_NAME}. All rights reserved."
VIAddVersionKey "FileDescription" "Installs ${APP_NAME}"
VIAddVersionKey "FileVersion" "${INSTALLER_VERSION}"
VIAddVersionKey "ProductVersion" "${APP_VERSION}"
VIAddVersionKey "OriginalFilename" "${INSTALLER_FILENAME}"
VIFileVersion "${INSTALLER_VERSION}"
VIProductVersion "${APP_VERSION}"

!include "FileFunc.nsh" ; GetParameters
!include "LogicLib.nsh" ; ${If}, etc
!include "MUI2.nsh" ; Modern UI 2
!include "WinVer.nsh" ; AtLeastWin10
!include "x64.nsh" ; RunningX64

; Configure Pages
BrandingText " "  ; Remove 'Nullsoft Install System' text
!define MUI_ICON "${INSTALLER_ICON_PATH}"
!define MUI_UNICON "${INSTALLER_ICON_PATH}"

; Installer Pages
;!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE "${LICENSE_TXT_PATH}"
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES

; Must set language, else many text elements will be missing from the UI.
!insertmacro MUI_LANGUAGE "English"

Var /GLOBAL start_menu_shortcut
Var /GLOBAL desktop_shortcut

Function .onInit
  ; Set command-line defaults
  StrCpy $start_menu_shortcut "TRUE"
  StrCpy $desktop_shortcut "TRUE"

  ${If} "${CREATE_START_MENU_SHORTCUT}" == "FALSE"
    StrCpy $start_menu_shortcut "FALSE"
  ${EndIf}

  ${If} "${CREATE_DESKTOP_SHORTCUT}" == "FALSE"
    StrCpy $desktop_shortcut "FALSE"
  ${EndIf}

  ; Use "all-users" folders, instead of the "per-user" folders.
  ; In other words, if we install a desktop shortcut, the variable
  ; used to specify the $DESKTOP (or $SMPROGRAMS - start menu)
  ; will be the "all-users" version of those folders.
  SetShellVarContext all

  ; Empty ${APP_NAME} would cause big problems, so prevent it.
  ${If} "${APP_NAME}" == ""
    MessageBox MB_OK "APP_NAME cannot be empty. Quitting."
    Quit
  ${EndIf}

  ; If /BYPASS=TRUE parameter is passed to this installer,
  ; bypass the OS and Architecture checks, for future-proofing.
  ${GetParameters} $0
  ;MessageBox MB_OK "Params: [$0]"
  ClearErrors
  ; $1 becomes the token after /BYPASS
  ${GetOptions} $0 "/BYPASS" $1
  ${If} ${Errors}  ; if error, then /BYPASS param does NOT exist
  ${OrIf} $1 == "=FALSE"
    ClearErrors
    ; Require Windows 10+
    ${IfNot} ${AtLeastWin10}
      MessageBox MB_OK "Windows 10 and above is required to install and run this program.$\n\
          This installer will now close."
      Quit
    ${EndIf}

    ; Require x64
    ${IfNot} ${RunningX64}
      MessageBox MB_OK "This version of Windows is not 64-bit.$\n\
          A 64-bit version of Windows is required to install and run this program.$\n\
          This installer will now close."
      Quit
    ${EndIf}
  ${EndIf}

FunctionEnd

Section "install"
  ; $INSTDIR is the final selected installation directory
  SetOutPath "$INSTDIR"

  ; Specify folders and files to be installed.
  ; This include file is generated by build.py.
  !include "InstallFiles.nsh"

  WriteUninstaller "$INSTDIR\uninstall.exe"

  ; Start Menu shortcut
  ${If} $start_menu_shortcut == "TRUE"
    CreateDirectory "$SMPROGRAMS\${COMPANY_NAME}"
    CreateShortCut "$SMPROGRAMS\${COMPANY_NAME}\${APP_NAME}.lnk" "$INSTDIR\${MAIN_FILE}" "" "$INSTDIR\${ICON_PATH}"
  ${EndIf}

  ; Desktop shortcut
  ${If} $desktop_shortcut == "TRUE"
    CreateShortcut "$DESKTOP\${APP_NAME}.lnk" "$INSTDIR\${MAIN_FILE}"
  ${EndIf}

	; Registry information for add/remove programs
  ; See: https://learn.microsoft.com/en-us/windows/win32/msi/uninstall-registry-key
  ; These actually appear under \HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\
  ; (It uses 'WOW6432Node' when running on 64-bit Windows.)
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "DisplayName" "${APP_NAME}"
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "UninstallString" "$\"$INSTDIR\uninstall.exe$\""
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "QuietUninstallString" "$\"$INSTDIR\uninstall.exe$\" /S"
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "InstallLocation" "$\"$INSTDIR$\""
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "DisplayIcon" "$\"$INSTDIR\${ICON_PATH}$\""
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "Publisher" "${COMPANY_NAME}"
	;WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "HelpLink" "${HELPURL}"
	;WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "URLUpdateInfo" "${UPDATEURL}"
	;WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "URLInfoAbout" "${ABOUTURL}"
	WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "DisplayVersion" "${APP_VERSION}"
	; There is no option for modifying or repairing the install
	WriteRegDWORD HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "NoModify" 1
	WriteRegDWORD HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}" "NoRepair" 1
SectionEnd

function un.onInit
	SetShellVarContext all

	; Give user a chance to cancel uninstall
	MessageBox MB_YESNO "Are you sure you want to uninstall ${APP_NAME}?" /SD IDYES IDYES next
		Abort
  next:
functionEnd

Section "uninstall"
  ;MessageBox MB_OK "INSTDIR: [$INSTDIR]"

  # Delete Desktop shortcut
  Delete "$DESKTOP\${APP_NAME}.lnk"

  # Delete Start Menu shortcut
	Delete "$SMPROGRAMS\${COMPANY_NAME}\${APP_NAME}.lnk"
	# Only delete Start Menu company folder if it's empty.
	RMDir "$SMPROGRAMS\${COMPANY_NAME}"
  ClearErrors

  ; Delete installed files and any empty folders.
  ; This include file is generated by build.py,
  ; and does the exact opposite of "InstallFiles.nsh"
  !include "UninstallFiles.nsh"

  ; Always delete uninstaller last
	Delete "$INSTDIR\uninstall.exe"

  ; Only delete the install dir if it's empty.
  ; NEVER USE /r HERE, AS IT'S DANGEROUS!
  ; (user may have installed to C:\ or C:\Program Files\,
  ;  or may have put their own files under the install dir.)
  RMDir "$INSTDIR"
  ClearErrors

  ; Remove uninstaller information from the registry
	DeleteRegKey HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${COMPANY_NAME} ${APP_NAME}"
SectionEnd
